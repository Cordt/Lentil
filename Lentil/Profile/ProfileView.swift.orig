// Lentil
// Created by Laura and Cordt Zermin

import ComposableArchitecture
import SDWebImageSwiftUI
import SwiftUI


struct ProfileView: View {
  let store: Store<Profile.State, Profile.Action>
  
  @ViewBuilder
  func linkIcon(icon: Icon, url: URL) -> some View {
    Link(destination: url) {
      icon.view(.large)
        .frame(width: 36, height: 36)
        .background { Theme.Color.white.opacity(0.7) }
        .clipShape(Circle())
    }
    .tint(Theme.Color.tertiary)
    .padding([.top, .leading, .bottom], 10)
  }
  
  @ViewBuilder
  func cover(width: CGFloat, height: CGFloat) -> some View {
    WithViewStore(self.store, observe: { $0 }) { viewStore in
      ZStack(alignment: .bottomLeading) {
<<<<<<< HEAD
        IfLetStore(
          self.store.scope(
            state: \.remoteCoverPicture,
            action: Profile.Action.remoteCoverPicture
          ),
          then: {
            LentilImageView(store: $0)
              .frame(width: width, height: height)
              .clipped()
          },
          else: {
            Theme.lentilGradient()
              .frame(width: width, height: height)
          }
        )
=======
        if let url = viewStore.profile.coverPictureUrl {
          WebImage(url: url)
            .resizable()
            .placeholder {
              Rectangle()
              .foregroundColor(Theme.Color.greyShade1)
            }
            .indicator(.activity)
            .transition(.fade(duration: 0.5))
            .scaledToFill()
            .frame(width: width, height: height)
            .clipped()
        }
        else {
          lentilGradient()
            .frame(width: width, height: height)
        }
        
>>>>>>> main
        HStack {
          if let twitter = viewStore.twitterURL {
            self.linkIcon(icon: Icon.twitter, url: twitter)
          }
          
          if let website = viewStore.websiteURL {
            self.linkIcon(icon: Icon.website, url: website)
          }
        }
        .opacity(viewStore.profileDetailHidden ? 0.0 : 1.0)
      }
    }
  }
  
  @ViewBuilder
  func profilePicture() -> some View {
    WithViewStore(self.store, observe: { $0.profile }) { viewStore in
      if let url = viewStore.profilePictureUrl {
        WebImage(url: url)
          .resizable()
          .placeholder {
            profileGradient(from: viewStore.handle)
          }
          .indicator(.activity)
          .transition(.fade(duration: 0.5))
          .scaledToFill()
      }
      else {
        profileGradient(from: viewStore.handle)
      }
    }
    .frame(width: 112, height: 112)
    .clipShape(Circle())
    .overlay(Circle().strokeBorder(Theme.Color.white, lineWidth: 1.0))
    .offset(y: 64)
  }
  
  var body: some View {
    WithViewStore(self.store, observe: { $0 }) { viewStore in
      GeometryReader { geometry in
        VStack(spacing: 0) {
          ZStack(alignment: .bottomTrailing) {
            self.cover(width: geometry.size.width, height: 300)
            
            self.profilePicture()
              .opacity(viewStore.profileDetailHidden ? 0.0 : 1.0)
              .padding(.trailing)
          }
          .padding(.top, viewStore.coverOffset)
          
          ScrollView(
            axes: .vertical,
            showsIndicators: false,
            offsetChanged: { viewStore.send(.scrollPositionChanged($0)) }
          ) {
            LazyVStack(alignment: .leading) {
              VStack(alignment: .leading) {
                HStack {
                  VStack(alignment: .leading) {
                    Spacer()
                    Text(viewStore.profile.name ?? "@\(viewStore.profile.handle)")
                      .font(style: .largeHeadline)
                    
                    if viewStore.profile.name != nil {
                      Text("@\(viewStore.profile.handle)")
                        .font(style: .body)
                    }
                  }
                  .frame(height: 112)
                  
                  Spacer()
                }
                .padding(.bottom, 5)
                
                if let bio = viewStore.profile.bio {
                  Text(bio)
                    .font(style: .annotation, color: Theme.Color.greyShade3)
                    .padding(.bottom, 5)
                }
                
                HStack(alignment: .top) {
                  VStack(alignment: .leading, spacing: 5) {
                    HStack(spacing: 5) {
                      Text(simpleCount(from: viewStore.profile.followers))
                        .font(style: .bodyBold)
                      Text(viewStore.profile.followers == 1 ? "Follower" : "Followers")
                        .font(style: .body)
                    }
                    HStack {
                      if let joined = viewStore.profile.joinedDate {
                        Icon.lens.view()
                        Text("Joined " + age(joined))
                          .font(style: .body)
                      }
                    }
                  }
                  .padding(.trailing, 10)
                  
                  VStack(alignment: .leading, spacing: 5) {
                    HStack {
                      Text(simpleCount(from: viewStore.profile.following))
                        .font(style: .bodyBold)
                      Text("Following")
                        .font(style: .body)
                    }
                    HStack {
                      if let location = viewStore.profileLocation {
                        Icon.location.view()
                        Text(location)
                          .font(style: .body)
                      }
                    }
                  }
                }
              }
              .padding(.top, -48)
              .padding([.leading, .trailing])
              
              ForEachStore(
                self.store.scope(
                  state: \.posts,
                  action: Profile.Action.post
                )
              ) { store in
                PostView(store: store)
              }
            }
          }
        }
        .ignoresSafeArea()
        .toolbar {
          ToolbarItem(placement: .navigationBarLeading) {
            HStack {
              BackButton { viewStore.send(.dismissView) }
              
              Text(viewStore.profile.name ?? "@\(viewStore.profile.handle)")
                .font(style: .headline, color: Theme.Color.white)
                .opacity(viewStore.profileDetailHidden ? 1.0 : 0.0)
            }
          }
        }
        .toolbar(.hidden, for: .tabBar)
        .toolbarBackground(.hidden, for: .navigationBar)
        .navigationBarBackButtonHidden(true)
        .tint(Theme.Color.white)
        .task {
          await viewStore.send(.didAppear)
            .finish()
        }
      }
    }
  }
}

#if DEBUG
struct ProfileView_Previews: PreviewProvider {
  static var previews: some View {
    ProfileView(
      store: .init(
        initialState: .init(navigationId: "abc", profile: MockData.mockProfiles[2]),
        reducer: Profile()
      )
    )
  }
}
#endif
