# MARK: Queries

query Challenge($request: ChallengeRequest!) {
	challenge(request: $request) {
		text
	}
}

query Verify($request: VerifyRequest!) {
	verify(request: $request)
}

query ExplorePublications($request: ExplorePublicationRequest!, $reactionRequest: ReactionFieldResolverRequest) {
  explorePublications(request: $request) {
    items {
      __typename
      ... on Post {
        ...PostFields
        postReaction: reaction(request: $reactionRequest)
      }
      ... on Comment {
        ...CommentFields
        commentReaction: reaction(request: $reactionRequest)
      }
      ... on Mirror {
        ...MirrorFields
        mirrorReaction: reaction(request: $reactionRequest)
      }
    }
    pageInfo {
      prev
      next
      totalCount
    }
  }
}

query Feed($request: FeedRequest!, $reactionRequest: ReactionFieldResolverRequest) {
  feed(request:$request) {
    items {
      root {
        ... on Post {
          ...PostFields
          postReaction: reaction(request: $reactionRequest)
        }
        ... on Comment {
          ...CommentFields
          commentReaction: reaction(request: $reactionRequest)
        }
      }
      mirrors {
        profile {
          id
          handle
        }
        timestamp
      }
    }
    pageInfo {
      prev
      next
      totalCount
    }
  }
}

query Publications($request: PublicationsQueryRequest!, $reactionRequest: ReactionFieldResolverRequest) {
	publications(request: $request) {
		items {
			__typename
			... on Post {
				...PostFields
				postReaction: reaction(request: $reactionRequest)
			}
			... on Comment {
				...CommentFields
				commentReaction: reaction(request: $reactionRequest)
			}
			... on Mirror {
				...MirrorFields
				mirrorReaction: reaction(request: $reactionRequest)
			}
		}
		pageInfo {
			prev
			next
			totalCount
		}
	}
}

query Publication($request: PublicationQueryRequest!) {
  publication(request: $request) {
   __typename
    ... on Post {
      ...PostFields
    }
    ... on Comment {
      ...CommentBaseFields
    }
    ... on Mirror {
      ...MirrorBaseFields
    }
  }
}

query WhoReactedPublication($request: WhoReactedPublicationRequest!) {
	whoReactedPublication(request: $request) {
		items {
			reactionId
			reaction
			reactionAt
			profile {
				...ProfileFields
			}
		}
		pageInfo {
			prev
			next
			totalCount
		}
	}
}

query DefaultProfile($request: DefaultProfileRequest!) {
	defaultProfile(request: $request) {
		...ProfileFields
	}
}

query Profile($request: SingleProfileQueryRequest!) {
  profile(request: $request) {
    ...ProfileFields
  }
}

query Profiles($request: ProfileQueryRequest!) {
	profiles(request: $request) {
		items {
			...ProfileFields
		}
	}
}


# MARK: Mutations

mutation Broadcast($request: BroadcastRequest!) {
	broadcast(request: $request) {
		... on RelayerResult {
			txHash
			txId
		}
		... on RelayError {
			reason
		}
	}
}

mutation Authenticate($request: SignedAuthChallenge!) {
	authenticate(request: $request) {
		accessToken
		refreshToken
	}
}

mutation Refresh($request: RefreshRequest!) {
	refresh(request: $request) {
		accessToken
		refreshToken
	}
}

mutation CreatePostViaDispatcher($request: CreatePublicPostRequest!) {
  createPostViaDispatcher(request: $request) {
    ... on RelayerResult {
      txHash
      txId
    }
    ... on RelayError {
      reason
    }
  }
}

mutation CreateCommentViaDispatcher($request: CreatePublicCommentRequest!) {
  createCommentViaDispatcher(request: $request) {
    ... on RelayerResult {
      txHash
      txId
    }
    ... on RelayError {
      reason
    }
  }
}

mutation AddReaction($request: ReactionRequest!) {
	addReaction(request: $request)
}

mutation RemoveReaction($request: ReactionRequest!) {
	removeReaction(request: $request)
}

mutation CreateSetDefaultProfileTypedData($request: CreateSetDefaultProfileRequest!) {
	createSetDefaultProfileTypedData(request: $request) {
		id
		expiresAt
		typedData {
			types {
				SetDefaultProfileWithSig {
					name
					type
				}
			}
			domain {
				name
				chainId
				version
				verifyingContract
			}
			value {
				nonce
				deadline
				wallet
				profileId
			}
		}
	}
}


# MARK: Fragments

fragment MediaFields on Media {
  url
  width
  height
  mimeType
}

fragment ProfileFields on Profile {
  id
  name
  bio
  attributes {
    displayType
    traitType
    key
    value
  }
  isFollowedByMe
  isFollowing(who: null)
  followNftAddress
  metadata
  isDefault
  handle
  picture {
    ... on NftImage {
      contractAddress
      tokenId
      uri
      verified
    }
    ... on MediaSet {
      original {
        ...MediaFields
      }
      small {
        ...MediaFields
      }
      medium {
        ...MediaFields
      }
    }
  }
  coverPicture {
    ... on NftImage {
      contractAddress
      tokenId
      uri
      verified
    }
    ... on MediaSet {
      original {
        ...MediaFields
      }
      small {
       ...MediaFields
      }
      medium {
        ...MediaFields
      }
    }
  }
  ownedBy
  dispatcher {
    address
  }
  stats {
    totalFollowers
    totalFollowing
    totalPosts
    totalComments
    totalMirrors
    totalPublications
    totalCollects
  }
  followModule {
    ... on FeeFollowModuleSettings {
      type
      amount {
        asset {
          name
          symbol
          decimals
          address
        }
        value
      }
      recipient
    }
    ... on ProfileFollowModuleSettings {
     type
    }
    ... on RevertFollowModuleSettings {
     type
    }
  }
}

fragment PublicationStatsFields on PublicationStats {
  totalAmountOfMirrors
  totalAmountOfCollects
  totalAmountOfComments
	totalUpvotes
	totalDownvotes
}

fragment MetadataOutputFields on MetadataOutput {
  name
  description
  content
  media {
    original {
      ...MediaFields
    }
    small {
      ...MediaFields
    }
    medium {
      ...MediaFields
    }
  }
  attributes {
    displayType
    traitType
    value
  }
}

fragment Erc20Fields on Erc20 {
  name
  symbol
  decimals
  address
}

fragment CollectModuleFields on CollectModule {
  __typename
  ... on FreeCollectModuleSettings {
    type
  }
  ... on FeeCollectModuleSettings {
    type
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
  }
  ... on LimitedFeeCollectModuleSettings {
    type
    collectLimit
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
  }
  ... on LimitedTimedFeeCollectModuleSettings {
    type
    collectLimit
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
    endTimestamp
  }
  ... on RevertCollectModuleSettings {
    type
  }
  ... on TimedFeeCollectModuleSettings {
    type
    amount {
      asset {
        ...Erc20Fields
      }
      value
    }
    recipient
    referralFee
    endTimestamp
  }
}

fragment PostFields on Post {
  id
  profile {
    ...ProfileFields
  }
  stats {
    ...PublicationStatsFields
  }
  metadata {
    ...MetadataOutputFields
  }
  createdAt
  collectModule {
    ...CollectModuleFields
  }
  referenceModule {
    ... on FollowOnlyReferenceModuleSettings {
      type
    }
  }
  appId
  hidden
  reaction(request: null)
  mirrors(by: null)
  hasCollectedByMe
}

fragment MirrorBaseFields on Mirror {
  id
  profile {
    ...ProfileFields
  }
  stats {
    ...PublicationStatsFields
  }
  metadata {
    ...MetadataOutputFields
  }
  createdAt
  collectModule {
    ...CollectModuleFields
  }
  referenceModule {
    ... on FollowOnlyReferenceModuleSettings {
      type
    }
  }
  appId
  hidden
  reaction(request: null)
  hasCollectedByMe
}

fragment MirrorFields on Mirror {
  ...MirrorBaseFields
  mirrorOf {
   ... on Post {
      ...PostFields
   }
   ... on Comment {
      ...CommentFields
   }
  }
}

fragment CommentBaseFields on Comment {
  id
  profile {
    ...ProfileFields
  }
  stats {
    ...PublicationStatsFields
  }
  metadata {
    ...MetadataOutputFields
  }
  createdAt
  collectModule {
    ...CollectModuleFields
  }
  referenceModule {
    ... on FollowOnlyReferenceModuleSettings {
      type
    }
  }
  appId
  hidden
  reaction(request: null)
  mirrors(by: null)
  hasCollectedByMe
}

fragment CommentFields on Comment {
  ...CommentBaseFields
  mainPost {
    ... on Post {
      ...PostFields
      postReaction: reaction(request: $reactionRequest)
    }
    ... on Mirror {
      ...MirrorBaseFields
      mirrorOf {
        ... on Post {
           ...PostFields
        }
        ... on Comment {
           ...CommentMirrorOfFields
        }
      }
    }
  }
}

fragment CommentMirrorOfFields on Comment {
  ...CommentBaseFields
  mainPost {
    ... on Post {
      ...PostFields
    }
    ... on Mirror {
       ...MirrorBaseFields
    }
  }
}
